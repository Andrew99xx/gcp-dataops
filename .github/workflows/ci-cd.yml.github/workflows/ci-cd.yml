name: CI-CD

on:
  push:
    branches:
      - main

jobs:
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r requirements-dev.txt
      - run: isort --check-only .
      - run: black --check .

  test-python:
    runs-on: ubuntu-latest
    needs: lint-python
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - run: python -m pytest -q

  test-sqlmesh:
    runs-on: ubuntu-latest
    env:
      GCS_HMAC_KEY_ID:       ${{ secrets.GCS_HMAC_KEY_ID }}
      GCS_HMAC_SECRET:       ${{ secrets.GCS_HMAC_SECRET }}
      DUCKLAKE_BUCKET:       ${{ secrets.DUCKLAKE_BUCKET }}
      RAW_BUCKET:            ${{ secrets.RAW_BUCKET }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install sqlmesh duckdb
      - name: Run SQLMesh tests
        working-directory: Sqlmesh
        run: sqlmesh test --environment dev

  terraform-plan:
    runs-on: ubuntu-latest
    needs: test-sqlmesh
    steps:
      - name: Decode SA key
        run: |
          echo "$GCP_SA_KEY_B64" | base64 --decode > "${HOME}/gcp-sa-key.json"
          export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcp-sa-key.json"
      - uses: actions/checkout@v3
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'
      - name: Terraform fmt & init
        working-directory: Terraform
        env:
          TF_VAR_project_id:            ${{ secrets.GCP_PROJECT }}
          TF_VAR_region:                ${{ secrets.GCP_REGION }}
          TF_VAR_raw_bucket_name:       ${{ secrets.RAW_BUCKET }}
          TF_VAR_ducklake_bucket_name:  ${{ secrets.DUCKLAKE_BUCKET }}
          TF_VAR_artifact_repo_id:      ${{ secrets.ARTIFACT_REPO_ID }}
          TF_VAR_image_uri:             ${{ secrets.CLOUD_RUN_IMAGE_URI }}
          TF_VAR_cloud_run_service:     ${{ secrets.CLOUD_RUN_SERVICE }}
        run: |
          terraform fmt -check -recursive
          terraform init -input=false
      - name: Terraform validate & plan
        working-directory: Terraform
        env:
          TF_VAR_project_id:            ${{ secrets.GCP_PROJECT }}
          TF_VAR_region:                ${{ secrets.GCP_REGION }}
          TF_VAR_raw_bucket_name:       ${{ secrets.RAW_BUCKET }}
          TF_VAR_ducklake_bucket_name:  ${{ secrets.DUCKLAKE_BUCKET }}
          TF_VAR_artifact_repo_id:      ${{ secrets.ARTIFACT_REPO_ID }}
          TF_VAR_image_uri:             ${{ secrets.CLOUD_RUN_IMAGE_URI }}
          TF_VAR_cloud_run_service:     ${{ secrets.CLOUD_RUN_SERVICE }}
        run: |
          terraform validate -no-color
          terraform plan -out=tfplan -no-color
      - name: Upload Terraform plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: Terraform/tfplan

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - uses: actions/checkout@v3
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Configure Docker auth
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet
      - name: Build & push Docker image
        run: |
          IMAGE_URI=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REPO_ID }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
          echo "Built image: $IMAGE_URI"
          docker buildx build --platform linux/amd64 -t $IMAGE_URI --push api/
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - uses: actions/checkout@v3
      - name: Download Terraform plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: Terraform
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Apply Terraform
        working-directory: Terraform
        env:
          TF_VAR_project_id:            ${{ secrets.GCP_PROJECT }}
          TF_VAR_region:                ${{ secrets.GCP_REGION }}
          TF_VAR_raw_bucket_name:       ${{ secrets.RAW_BUCKET }}
          TF_VAR_ducklake_bucket_name:  ${{ secrets.DUCKLAKE_BUCKET }}
          TF_VAR_artifact_repo_id:      ${{ secrets.ARTIFACT_REPO_ID }}
          TF_VAR_image_uri:             ${{ env.IMAGE_URI }}
          TF_VAR_cloud_run_service:     ${{ secrets.CLOUD_RUN_SERVICE }}
        run: terraform apply -auto-approve
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE }} \
            --image ${{ env.IMAGE_URI }} \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --quiet
